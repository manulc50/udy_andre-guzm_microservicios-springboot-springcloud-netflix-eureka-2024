# Este archivo de propiedades se va a ejecutar después que el otro archivo de propiedades "bootstrap.properties",es decir,"bootstrap.properties" tiene prioridad sobre este archivo
# Con esta propiedad establecemos el nombre de nuestra aplicación para luego poder usarlo en el servidor de nombres Netflix Eureka y en el balanceador de carga
spring.application.name=servicio-items
# Cambiamos el puerto(por defecto es 8080) donde se va a ejecutar esta aplicación en el servidor Tomcat embebido en SpringBoot
server.port=8002
# Con esta propiedad creamos dos instancias para escalar el microservicio "servicio-productos";una en la url o path "localhost:8001" y la otra en "localhost:9001"
# La primera parte del nombre de esta propiedad(hasta el primer punto) tiene que ser el nombre del microservicio con el que queremos establecer una comunicación,es decir,"servicio-productos"
# La instancia en la url "localhost:8001" es la que hay por defecto ya que en esa instancia es donde arranca el Tomcat embebido de SpringBoot
# Esta propiedad no hace falta si vamos a registrar los microservicios en el servidor Eureka de Netflix porque este servidor,por defecto,ya está integrado con el balanceador de carga Ribbon y se encarga automáticamente de su gestión
# Si no usamos el servidor Eureka de Netflix,si hace falta establecer esta propiedad
#servicio-productos.ribbon.listOfServers=localhost:8001,localhost:9001

# Con esta propiedad indicamos a este microservicio la url o path donde en encuentra el servidor Eureka de Netflix para su registro
# Se puede omitir si tanto los microservicios que se van a registrar como el servidor se encuentran en la misma máquina y el servidor se ejecuta en el puerto por defecto 8761,pero normalmente siempre es mejor indicar esta propiedad
# Url para la comunicaciçon con Eureka Server en local -> http://localhost:8761/eureka
# Url para la comunicaciçon con Eureka Server en Docker con un contenedor llamado "servicio-eureka-server" -> http://servicio-eureka-server:8761/eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# El timeout por defecto de Hystrix y Ribbon es de 1 seg
# Con estas propiedades podemos establecer timeouts para Hystrix(manejador de errores de Netflix) y Ribbon(balanceador de carga de Netflix)
# Como Hystrix envuelve a Ribbon,el timeout de Hystrix debe ser igual o mayor a la suma de los timeouts ConnectTimout y ReadTimeout de Ribbon
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:20000
#ribbon.ConnectTimout:3000
#ribbon.ReadTimeout:10000

# Propiedad para modificar la probabilidad por defecto(0.1, que es un 10% del total de las peticiones) con la que Sleuth interfiere las peticiones http
# Establecemos un 1.0 que se corresponde con el 100% de las peticiones http
spring.sleuth.sampler.probability=1.0

# Esta propiedad es para indicar la ruta o path donde se está ejecutando el servidor Zipkin
# Por defecto se ejecuta en la ruta o path "http://localhost:9411/",así que no haría falta modificar el valor de esta propiedad.Si el servidor estuviera ejecutándose en otra máquina y/o puerto,sí habría que indicarlo modificando esta propiedad 
#spring.zipkin.base-url=http://localhost:9411/
# Indicamos que use el broker de mensajería RabbitMQ en lugar del protocolo HTTP(valor por defecto)
spring.zipkin.sender.type=rabbit

saludo.texto=adiossssssssssss