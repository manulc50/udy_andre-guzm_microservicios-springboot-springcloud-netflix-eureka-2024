# Con esta propiedad establecemos el nombre de nuestra aplicación para luego poder usarlo en el servidor de nombres Netflix Eureka y en el balanceador de carga
spring.application.name=servicio-zuul-server
# Cambiamos el puerto(por defecto es 8080) donde se va a ejecutar esta aplicación en el servidor Tomcat embebido en SpringBoot
server.port=8090
# Con esta propiedad indicamos a este microservicio la url o path donde en encuentra el servidor Eureka de Netflix para su registro
# Se puede omitir si tanto los microservicios que se van a registrar como el servidor se encuentran en la misma máquina y el servidor se ejecuta en el puerto por defecto 8761,pero normalmente siempre es mejor indicar esta propiedad
# Url para la comunicaciçon con Eureka Server en local -> http://localhost:8761/eureka
# Url para la comunicaciçon con Eureka Server en Docker con un contenedor llamado "servicio-eureka-server" -> http://servicio-eureka-server:8761/eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# Con las siguientes propiedades establecemos rutas dinámicas a los microservicios
# Todas las rutas para el microservicio "servicio-productos" van a pasar por la ruta "/api/productos/**" de este API Gateway
# Target endpoint(endpoint del microservicio)
zuul.routes.productos.service-id=servicio-productos
# API endpoint(endpoint del API Gateway)
zuul.routes.productos.path=/api/productos/**
# Todas las rutas para el microservicio "servicio-items" van a pasar por la ruta "/api/items/**" de este API Gateway
# Target endpoint(endpoint del microservicio)
zuul.routes.items.service-id=servicio-items
# API endpoint(endpoint del API Gateway)
zuul.routes.items.path=/api/items/**
# Todas las rutas para el microservicio "servicio-usuarios" van a pasar por la ruta "/api/usuarios/**" de este API Gateway
# Target endpoint(endpoint del microservicio)
zuul.routes.usuarios.service-id=servicio-usuarios
# API endpoint(endpoint del API Gateway)
zuul.routes.usuarios.path=/api/usuarios/**
# Todas las rutas para el microservicio "servicio-oauth" van a pasar por la ruta "/api/security/**" de este API Gateway
# Target endpoint(endpoint del microservicio)
zuul.routes.security.service-id=servicio-oauth
# API endpoint(endpoint del API Gateway)
zuul.routes.security.path=/api/security/**
# Para que funcione correctamente la autenticación,tenemos que quitar o excluir de las cabeceras de cada petición http las cookies
zuul.routes.security.sensitive-headers=Cookie,Set-Cookie

# El timeout por defecto de Hystrix y Ribbon es de 1 seg
# Con estas propiedades podemos establecer timeouts para Hystrix(manejador de errores de Netflix) y Ribbon(balanceador de carga de Netflix)
# Como Hystrix envuelve a Ribbon,el timeout de Hystrix debe ser igual o mayor a la suma de los timeouts ConnectTimout y ReadTimeout de Ribbon
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:20000
#ribbon.ConnectTimout:3000
#ribbon.ReadTimeout:10000

# Propiedad para modificar la probabilidad por defecto(0.1, que es un 10% del total de las peticiones) con la que Sleuth interfiere las peticiones http
# Establecemos un 1.0 que se corresponde con el 100% de las peticiones http
spring.sleuth.sampler.probability=1.0

# Esta propiedad es opcional y sirve para indicar la ruta o path donde se encuentra el servidor Zipkin
# Si no se establece, por defecto busca al servidor en la ruta "http://localhost:9411/"
#spring.zipkin.baseUrl=http://localhost:9411/
# Indicamos que use el broker de mensajería RabbitMQ en lugar del protocolo HTTP(valor por defecto)
spring.zipkin.sender.type=rabbit