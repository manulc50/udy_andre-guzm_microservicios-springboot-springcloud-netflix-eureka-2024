# Con esta propiedad establecemos el nombre de nuestra aplicación para luego poder usarlo en el servidor de nombres Netflix Eureka y en el balanceador de carga
spring.application.name=servicio-productos
# Si existe la variable de entorno "PORT", se establece su valor
# En caso contrario, el valor 0 hace que el número del puerto se genere de manera automática y aleatoria por la aplicación en lugar de especificar un número en concreto.El número del puerto que se genere va a estar dentro de los disponibles,es decir,aquellos que no esten ocupados por otras aplicaciones
server.port=${PORT:0}
# Con esta propiedad configuramos la instancia en el servidor Eureka de Netflix.A la instancia le damos un nombre generado por valores de objetos gestionados por Spring
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
# Con esta propiedad indicamos a este microservicio la url o path donde en encuentra el servidor Eureka de Netflix para su registro
# Se puede omitir si tanto los microservicios que se van a registrar como el servidor se encuentran en la misma máquina y el servidor se ejecuta en el puerto por defecto 8761,pero normalmente siempre es mejor indicar esta propiedad
# Url para la comunicaciçon con Eureka Server en local -> http://localhost:8761/eureka
# Url para la comunicaciçon con Eureka Server en Docker con un contenedor llamado "servicio-eureka-server" -> http://servicio-eureka-server:8761/eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Nota: En el pom.xml tenemos 2 dependencias para trabajar con distintas bases de datos, H2 y MySQL
# Por defecto, si no se configura ningún data source, Spring Boot utiliza la base de datos H2

# Propiedad para modificar la probabilidad por defecto(0.1, que es un 10% del total de las peticiones) con la que Sleuth interfiere las peticiones http
# Establecemos un 1.0 que se corresponde con el 100% de las peticiones http
spring.sleuth.sampler.probability=1.0

# Esta propiedad es opcional y sirve para indicar la ruta o path donde se encuentra el servidor Zipkin
# Si no se establece, por defecto busca al servidor en la ruta "http://localhost:9411/"
#spring.zipkin.base-url=http://localhost:9411/
# Indicamos que use el broker de mensajería RabbitMQ en lugar del protocolo HTTP(valor por defecto)
spring.zipkin.sender.type=rabbit
