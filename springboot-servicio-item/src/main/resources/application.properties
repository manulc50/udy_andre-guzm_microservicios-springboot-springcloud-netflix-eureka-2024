# Este archivo de propiedades se va a ejecutar después que el otro archivo de propiedades "bootstrap.properties",es decir,"bootstrap.properties" tiene prioridad sobre este archivo
# Con esta propiedad establecemos el nombre de nuestra aplicación para luego poder usarlo en el servidor de nombres Netflix Eureka y en el balanceador de carga
spring.application.name=servicio-items
# Cambiamos el puerto(por defecto es 8080) donde se va a ejecutar esta aplicación en el servidor Tomcat embebido en SpringBoot
server.port=8002

# En este caso, con "optional" indicamos que la conexión con el servidor de configuraciones es opcional
# Es decir, si el servidor de configuraciones está levantado, este microservicio se conecta a él, pero si no lo está, no se conecta a él ejecutándose correctamente sin conflictos  
# (A partir de la versión 2.4.x de Spring Boot)Usando esta propiedad para importar datos del servidor de configuraciones, ya no es necesario crear el archivo bootstrap(properties o yaml)
# En este caso, como no se indica el host del servidor de configuraciones, por defecto intenta conectarse al host "http://localhost:8888"
# POR AHORA SE COMENTA PORQUE ESTAMOS USANDO EL CONTEXTO DE BOOTSTRAP
#spring.config.import=optional:configserver:

# Con esta propiedad indicamos a este microservicio la url o path donde en encuentra el servidor Eureka de Netflix para su registro
# Se puede omitir si tanto los microservicios que se van a registrar como el servidor se encuentran en la misma máquina y el servidor se ejecuta en el puerto por defecto 8761,pero normalmente siempre es mejor indicar esta propiedad
# Url para la comunicaciçon con Eureka Server en local -> http://localhost:8761/eureka
# Url para la comunicaciçon con Eureka Server en Docker con un contenedor llamado "servicio-eureka-server" -> http://servicio-eureka-server:8761/eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# Propiedad para modificar la probabilidad por defecto(0.1, que es un 10% del total de las peticiones) con la que Sleuth interfiere las peticiones http
# Establecemos un 1.0 que se corresponde con el 100% de las peticiones http
spring.sleuth.sampler.probability=1.0

# Esta propiedad es opcional y sirve para indicar la ruta o path donde se encuentra el servidor Zipkin
# Si no se establece, por defecto busca al servidor en la ruta "http://localhost:9411/" 
#spring.zipkin.base-url=http://localhost:9411/
# Indicamos que use el broker de mensajería RabbitMQ en lugar del protocolo HTTP(valor por defecto)
spring.zipkin.sender.type=rabbit

saludo.texto=adiossssssssssss