# Fichero de propiedades del microservicio "servicio-usuarios" para Spring Config Server para el entorno de Desarrollo
# El nombre de este archivo de propiedades tiene que llamarse igual que el nombre del microservicio seguido de un guión normal con el nombre del entorno
# Si estas propiedades ya existen en el archivo "application.properties" de cada microservicio,sus valores se van a sobrescribir por aquellos indicados en este archivo
# Las propiedades indicadas aquí que no existan en el archivo "application.properties",se van a combinar con ellas

# Con esta propiedad indicamos el path o url donde se encuentra nuestra base de datos "db_springboot_cloud" de PostgreSQL
# Como tenemos dos bases de datos instaladas como dependencias en este proyecto,H2 y PostgreSQL,si no especificamos un datasource con esta propiedad,por defecto se utiliza la base de datos en memoria H2
# Url para despliegue en local -> jdbc:postgresql://localhost:5432/db_springboot_cloud
# Url para despliegue en Docker con un contenedor llamado "microservicios-postgres12" -> spring.datasource.url=jdbc:postgresql://microservicios-postgres12:5432/db_springboot_cloud
spring.datasource.url=jdbc:postgresql://localhost:5432/db_springboot_cloud
# Establecemos el usuario "postgres" para la conexión a la base de datos "db_springboot_cloud" de PostgreSQL
spring.datasource.username=postgres
# Establecemos la contraseña o password para el usuario "root"
spring.datasource.password=root
# Con esta propiedad configuramos el driver de PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver
# Configuramos el dialecto para la versión 11.4(A partir de la versión 9.5 en adelante,la versión del dialecto es la 9.5) de PostgreSQL,que es la que tenemos instalada
# Nota: The dialect to use is detected by the JPA provider. If you prefer to set the dialect yourself, set the spring.jpa.database-platform property(Es decir, indicar esta propiedad es opcional)
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL95Dialect
# La siguiente propiedad es para probar los datos de nuestra base de datos durante el desarrollo del proyecto,pero no es para el entorno de Producción
# En función del valor de esta propiedad,genera,actualiza y/o elimina de manera automática,cuando arranca este proyecto Springboot, las tablas en nuestra base de datos a partir de las anotaciones JPA indicadas en las clases entidad o de persistencia
# Si el valor es "create",crea automatícamente las tablas en el incio de la aplicación eliminando,si existían en la base de datos, las tablas previas junto con sus datos
# Si el valor es "create-drop",igual que el valor "create" pero elimina automáticamente las tablas y sus datos cuando finaliza la ejecución de la aplicación
# Si el valor es "update",crea automáticamente las tablas en la primera ejecución de la aplicación y las mantiene en las siguientes ejecuciones actualizándolas, también de forma automática, en función de las mofificaciones que hagamos posteriormente en las clases entidad o de persistencia
# Si el valor es "none",automáticamente no se hace nada,es decir,ni se crean,ni se destruyen,ni se actualizan las tablas de manera automática.Este valor es apropiado cuando hemos creado previamente de manera manual nuestras tablas y sus datos y no queremos alterarlas de manera automática por esta aplicación.Este es el valor por defecto cuando se omite dar valor a esta propiedad
# Si el valor es "validate",simplemente valida automáticamente nuestro esquema con sus tablas y datos en la base de datos
# Nota: Por defecto, Spring Boot establece en esta propiedad el valor "create-drop", si se usa una base de datos embebida como H2, y establece el valor "none" para bases de datos externas como MySQL y PostgreSQL
# Nota: Si exite un archivo llamado "import.sql" en la raíz del classpath del proyecto, se ejecuta automáticamente si la propiedad de Hibernate "spring.jpa.hibernate.ddl-auto" tiene el valor "create" o "create-drop"
# Nota: En Producción, se debe eliminar esta propiedad para que por defecto se establezca en "none", o bien, se debe establecer manualmente a "none"
spring.jpa.hibernate.ddl-auto=create
# Con esta propiedad habilitamos que se muestren en la consola las consulas y acciones JPA que se hagan por debajo en la base de datos en fomrato SQL nativo
logging.level.org.hibernate.SQL=debug
# Para evitar un error,que no es grave,a la hora de arrancar una aplicación de Springboot con PostgreSQL,tenemos que activar la siguiente propiedad
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true